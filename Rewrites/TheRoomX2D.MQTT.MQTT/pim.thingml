/* ThingML Framework */

import "pim_messages.thingml"

thing PIM includes GeneralMsg, TemperatureMsg, OnOffMsg {
	required port to_psm {
		sends add_thermometer, add_device, SwitchOn, SwitchOff, prompt
	}
	provided port from_psm {
		receives heatOn, heatOff, set_temperature, set_delta, temperature, fetch_temp
	} 
	
	property tmrature:Double = 20 // the requested temperature for the room
	property thermo_id:Integer = 1 // the single thermometer identifier
	property switch_id:Integer = 1 // the single on-off switch identifier
	property delta:Double = 0.10 // the maximum allowed difference from the comfort temperature	
	property lasttemp:Double = 0 // the last temperature recorded, buffering one measurement
	
	statechart PIM_behavior init SetThermostat {
		on entry do
			print("Running The Room X2D.MQTT.sim")
		end
		state SetThermostat {
			transition -> SetThermostat
			event from_psm?temperature
			action do
				// just discard, the thermostat is not running, yet (161103)
			end
			transition -> Running
			event set_temp:from_psm?set_temperature
			action do
				tmrature = set_temp.t
				to_psm!add_thermometer(thermo_id,"t") // We have only one thermometer in this system
				to_psm!add_device(switch_id) // We have only one switch device in this system
				to_psm!prompt("Now entering thermostat. Please give temperature measurements") // SIMULATION: prompting on console for the user to react properly
			end
			transition -> SetThermostat
			event from_psm?heatOn
			action do
				to_psm!prompt("SwitchOn is not allowed. Please apply set_temperature for comfort temperature")
			end
			transition -> SetThermostat
			event from_psm?heatOff
			action do
				to_psm!prompt("SwitchOff is not allowed. Please apply set_temperature for comfort temperature")
			end
			transition -> SetThermostat
			event givedelta:from_psm?set_delta
			action do
				delta = givedelta.dlta
				to_psm!prompt("Comfort range updated. Please apply set_temperature for comfort temperature")
			end
			transition -> SetThermostat
			event from_psm?fetch_temp
			action do
				to_psm!prompt("fetch_temp is not allowed. Please apply set_temperature for comfort temperature")
			end
		}
		
		composite state Running init Thermostat keeps history {
		
			composite state Thermostat init TemprDecide {  // notice that we are not keeping history, we do not know whether to turn on or off
				state TemprDecide {
					transition -> TemprDecrease
					event temp2:from_psm?temperature
					guard temp2.t>=tmrature-delta  // We choose switch OFF as much as we can here
					action do
						to_psm!SwitchOff(switch_id)
					end
					
					transition -> TemprIncrease
					event temp2:from_psm?temperature
					guard temp2.t<tmrature-delta
					action do
						to_psm!SwitchOn(switch_id)
					end
				}
				
				state TemprIncrease{ // Invariant: Switch is ON and temperature should increase
				
					transition -> TemprIncrease 
					event temp:from_psm?temperature
					guard temp.t<=tmrature+delta // it should keep increasing until well above the desired temperature
					action do
						// TRACING to follow thermostat print("TempIncrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n") 
					end
					
					transition -> TemprDecrease
					event temp2:from_psm?temperature
					guard temp2.t>tmrature+delta 
					action do
						to_psm!SwitchOff(switch_id)
					end
				}

				state TemprDecrease{ // Invariant: Switch is OFF and temperature should decrease
				
					transition-> TemprDecrease
					event temp:from_psm?temperature
					guard temp.t>=tmrature-delta // it should keep decreasing until well below the desired temperature
					action do
						// TRACING to follow thermostat print("TempDecrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n") 
					end
					
					transition -> TemprIncrease
					event temp2:from_psm?temperature
					guard temp2.t<tmrature-delta
					action do
						to_psm!SwitchOn(switch_id)
					end
				}

				transition -> On
				event swon:from_psm?heatOn
				action do
					to_psm!SwitchOn(swon.did)
				end 
				transition -> Off
				event swoff:from_psm?heatOff
				action do
					to_psm!SwitchOff(swoff.did)
				end 
				transition -> Thermostat
				event set_temp:from_psm?set_temperature
				action do
					tmrature = set_temp.t
				end
			}
			
			state On {
				transition -> Off
				event swoff:from_psm?heatOff
				action do
					to_psm!SwitchOff(swoff.did)
				end 
				transition -> On
				event swon:from_psm?heatOn
				action do
					to_psm!SwitchOn(swon.did)
				end
				transition -> Thermostat
				event set_temp:from_psm?set_temperature
				action do
					tmrature = set_temp.t
				end
			}
			state Off {
				transition -> Off
				event swoff:from_psm?heatOff
				action do
					to_psm!SwitchOff(swoff.did)
				end 
				transition -> On
				event swon:from_psm?heatOn
				action do
					to_psm!SwitchOn(swon.did)
				end
				transition -> Thermostat
				event set_temp:from_psm?set_temperature
				action do
					tmrature = set_temp.t
				end			
			}
			
			// Now the parameters that should not change the innermost state
			transition -> Running
			event givedelta:from_psm?set_delta
			action do
				// just forward the polling interval instructions to the PSM
				delta = givedelta.dlta
			end
			transition -> Running
			event fetch:from_psm?fetch_temp
			action do
				// reporting the temperature value
				to_psm!prompt("temperature: " + lasttemp)
			end
			transition -> Running
			event temp:from_psm?temperature
			action do
				lasttemp = temp.t
			end
			
			// Messages that cannot occur - since they should always be handled in inner states
			transition -> Running
			event from_psm?heatOn
			action do
				to_psm!prompt("INTERNAL ERROR: Impossible SwitchOn at PIM.Running")
			end		
			transition -> Running
			event from_psm?heatOff
			action do
				to_psm!prompt("INTERNAL ERROR: Impossible SwitchOff at PIM.Running")
			end		
			transition -> Running
			event from_psm?set_temperature
			action do
				to_psm!prompt("INTERNAL ERROR: Impossible set_temperature at PIM.Running")
			end		
		}
	}
}

